#include "${header_name}"
#include "model.h"

${fraction_space_classname}::${fraction_space_classname}(FractionsPoolBase<SPACE_COORDS_COUNT, FRACTIONS_COUNT>* parentFractionsPool) :
    ${fraction_space_base_classname}(parentFractionsPool)
{
    // Configuring fraction axis
${axis_configuration}
    constructGrid(fractionGridDescription);
    // Configuring boundary conditions
${boundary_conditions_config}
}

void* ${fraction_cell_classname}::getModel()
{
    return static_cast<Space*>(getSpaceCell()->parentGrid)->parent;
}

void ${fraction_cell_classname}::initQuantities()
{
${init_quantities}
}

void ${fraction_cell_classname}::calculateDerivatives()
{
${space_coords_derivatives}
${fraction_coords_derivatives}
}

void ${fraction_cell_classname}::calculateSourceEvolution(double dt)
{
${sources}
}

double ${fraction_cell_classname}::getSpaceDiffusionCoefficient(uint quantity, uint axisIndex)
{
    double diffusion = 0.0;
${diffusion_coefficient_counting_code}
    return diffusion;
}

void ${fraction_cell_classname}::calculateIntensiveQuantities()
{
    if (isNull(extensiveQuantities[EVERY_FRACTION_COUNT_QUANTITY_INDEX])) {
        for (unsigned int i = 0; i != ${intensive_quantities_enum_prefix}COUNT; i++)
            intensiveQuantities[i] = 0.0;
        return;
    }
${intensive_quantities_counting_code}
}
