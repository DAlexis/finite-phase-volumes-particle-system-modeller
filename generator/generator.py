#!/usr/bin/python2.7
import code_utils
import name_generator
import model_defines_h_generator

import yaml
from  optparse import OptionParser
import os
import shutil
import time

# Parsing command line

cmdLineParser = OptionParser()
cmdLineParser.add_option("-d", "--directory", dest="derectory", default="../test/",
                  help="Directory whewre to put generated program", metavar="DIRECTORY")
cmdLineParser.add_option("-c", "--config", dest="config", default="configs/1d.yml",
                  help="Configuration file", metavar="CONFIG")

(cmdLineOptions, cmdLineArgs) = cmdLineParser.parse_args()
configFileName = cmdLineOptions.config
destinationDir = cmdLineOptions.derectory

# Beginning work
print ""
print "Code generation started"

config = yaml.load(open(configFileName))
indiferentDir = 'indiferent/'

generatedFileHeadComment = """ /*
 * This file is generated by script using """ + configFileName + ', ' + time.strftime("%H:%M:%S %d/%m/%Y") + """
 */
"""
generatedFileHeadCommentForMake = """#
# This file is generated by script using """ + configFileName + ', ' + time.strftime("%H:%M:%S %d/%m/%Y") + """
#
"""

#
# Copying files that should not be modified
#
print ""
print "Copying model-indiferent files"
filesAsIs = [
            'axis.cpp',
            'axis.h',
            'fraction-base.h',
            'fraction-cell-interface.h',
            'fraction-space-interface.h',
            'fractions-pool-base.cpp',
            'fractions-pool-base.h',
            'global-defines.h',
            'grid-template.h',
            'output.cpp',
            'output.h',
            'space.h',
            'model.h'
            ]

for fileName in filesAsIs:
    target = os.path.join(indiferentDir, fileName)
    print "Copying " + target + " to " + destinationDir
    shutil.copy(target, destinationDir)

name_generator.completeConfig(config)

#
# Generating code
#
print ""
print "Generating model-defines.h"
model_defines_h_generator.generate(destinationDir, config, generatedFileHeadComment)

print "Generating fraction-related headers and sources:"
for fractionId in config['model']['fractions']:
    fraction = config['model']['fractions'][fractionId]
    print "   " + fractionId + " header..."
    code_utils.genFileByTemplate(os.path.join(destinationDir, fraction['header_name']),
                                'templates/fraction-header.h.template',
                                fraction,
                                generatedFileHeadComment)
    print "   " + fractionId + " source..."
    code_utils.genFileByTemplate(os.path.join(destinationDir, fraction['cpp_name']),
                                'templates/fraction.cpp.template',
                                fraction,
                                generatedFileHeadComment)

print "Generating fractions-pool.h"
code_utils.genFileByTemplate(os.path.join(destinationDir, 'fractions-pool.h'),
                                'templates/fractions-pool.h.template',
                                config['model'],
                                generatedFileHeadComment)

print "Generating fractions-pool.cpp"
code_utils.genFileByTemplate(os.path.join(destinationDir, 'fractions-pool.cpp'),
                                'templates/fractions-pool.cpp.template',
                                config['model'],
                                generatedFileHeadComment)

print "Generating space.cpp"
code_utils.genFileByTemplate(os.path.join(destinationDir, 'space.cpp'),
                                'templates/space.cpp.template',
                                config['model'],
                                generatedFileHeadComment)


print "Generating model.cpp"
code_utils.genFileByTemplate(os.path.join(destinationDir, 'model.cpp'),
                                'templates/model.cpp.template',
                                config['model'],
                                generatedFileHeadComment)

print "Generating main.cpp"
code_utils.genFileByTemplate(os.path.join(destinationDir, 'main.cpp'),
                                'templates/main.cpp.template',
                                config['run_options'],
                                generatedFileHeadComment)

print "Generating Makefile"
code_utils.genFileByTemplate(os.path.join(destinationDir, 'Makefile'),
                                'templates/Makefile.template',
                                config['model'],
                                generatedFileHeadCommentForMake)


print ""
print "Code generation done."

