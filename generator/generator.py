#!/usr/bin/python2.7
import code_utils
import space_h_generator
import name_generator

import yaml
import argparse
import os
import shutil

from string import Template

# Parsing command line
cmdLineParser = argparse.ArgumentParser(description='Input and output configuration:')
cmdLineParser.add_argument('--config', help='XML configuration file to be parsed to generate code')
cmdLineParser.add_argument('--output-dir', help='Directory where program should be created')
cmdLineArgs = cmdLineParser.parse_args()

# Beginning work
print ""
print "Code generation started"

configFileName = 'configs/1d.yml'
destinationDir = '../test/'
config = yaml.load(open(configFileName))
#print config
indiferentDir = 'indiferent/'

splitterComment = '//////////////////////////'

generatedFileHeadComment = """ /*
 * This file is generated by script using """ + configFileName + """
 */
"""

#
# Copying files that should not be modified
#
print ""
print "Copying model-indiferent files"
filesAsIs = [
            'axis.cpp',
            'axis.h',
            'fraction-base.h',
            'fraction-cell-interface.h',
            'fraction-space-interface.h',
            'fractions-pool-base.cpp',
            'fractions-pool-base.h',
            'global-defines.h',
            'grid-template.h',
            'output.cpp',
            'output.h',
            'space.cpp',
            'space.h',
            ]

for fileName in filesAsIs:
    target = os.path.join(indiferentDir, fileName)
    print "Copying " + target + " to " + destinationDir
    shutil.copy(target, destinationDir)

#
# Initialising name generator
#
fractionNameGen = name_generator.NamesGenerator(config)

#
# Generating model-defines.h
#
modDef_h_filename = os.path.join(destinationDir, 'model-defines.h')
print ""
print "Generating model-defines.h"
modDef_h = open(modDef_h_filename, 'w')
modDef_h.write(generatedFileHeadComment)
modDef_h.write(
"""#ifndef MODEL_DEFINES_H_INCLUDED
#define MODEL_DEFINES_H_INCLUDED

""" + splitterComment + """
// General
enum Fraction
{
""")

isFirst = True
for fraction in fractionNameGen.fractions:
    modDef_h.write('    ' + fractionNameGen.fractions[fraction]['fractions_enum_element'])
    if isFirst:
        modDef_h.write(' = 0')
    
    modDef_h.write(',\n')

modDef_h.write('    ' + 'FRACTIONS_COUNT\n')
modDef_h.write(
"""}

""" + splitterComment + """
// Space defines
enum SpaceCoordinate {
""")

isFirst = True
for spaceDim in fractionNameGen.sapceDimensions:
    modDef_h.write('    ' + fractionNameGen.sapceDimensions[spaceDim]['space_dimension_enum_element'])
    if isFirst:
        modDef_h.write(' = 0')
    
    modDef_h.write(',\n')

modDef_h.write('    ' + 'SPACE_COORDS_COUNT\n')
modDef_h.write(
"""}

""" + splitterComment + """
// Space defines
enum SpaceCoordinate {
""")

modDef_h.write("""
#endif // MODEL_DEFINES_H_INCLUDED
""")

modDef_h.close()

#spaceGen = space_h_generator.SpaceHGenerator(config)
#spaceGen.generate()
#print spaceGen.string

print ""
print "Code generation done."

